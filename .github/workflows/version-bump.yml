name: Version Bump and Publish

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - 'docs/**'
      - '.github/**'

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release):')"

    permissions:
      contents: write
      pull-requests: write

    outputs:
      version: ${{ steps.version-info.outputs.version }}
      branch_name: ${{ steps.create-branch.outputs.branch_name }}
      pr_number: ${{ steps.create-pr.outputs.pull-request-number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Build
        run: npm run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: bump-type
        run: |
          BUMP_TYPE="patch"
          if git log -10 --pretty=format:"%s" | grep -E "(feat|feature):|feat\\(|feature\\("; then
            BUMP_TYPE="minor"
          fi
          if git log -10 --pretty=format:"%s" | grep -Ei "BREAKING CHANGE:|major:"; then
            BUMP_TYPE="major"
          fi
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Create version bump branch
        id: create-branch
        run: |
          BRANCH_NAME="version-bump-$(date +%s)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b "$BRANCH_NAME"

      - name: Commit build artifacts
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No build changes to commit."
          else
            git commit -m "chore: update build artifacts"
          fi

      - name: Bump version
        run: |
          npm version ${{ steps.bump-type.outputs.bump_type }} -m "chore(release): bump version to %s"

      - name: Get version info
        id: version-info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Push version bump branch
        run: |
          git push origin ${{ steps.create-branch.outputs.branch_name }}

      - name: Get commit info
        id: commit-info
        run: |
          COMMIT_INFO=$(git log -1 --pretty=format:"%h %s")
          echo "commit_info=$COMMIT_INFO" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): bump version to ${{ steps.version-info.outputs.version }}"
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: ${{ steps.create-branch.outputs.branch_name }}
          base: ${{ github.event.repository.default_branch }}
          delete-branch: true
          title: "chore(release): bump version to ${{ steps.version-info.outputs.version }}"
          body: |
            ## Automated Version Bump

            This PR bumps the version to `${{ steps.version-info.outputs.version }}` for release.

            **Version bump type:** `${{ steps.bump-type.outputs.bump_type }}`

            ### Recent Commit
            ${{ steps.commit-info.outputs.commit_info }}

            ### Release notes
            Includes changes since the last version.

          labels: |
            automated
            version-bump

      - name: Add PR info to job summary
        if: steps.create-pr.outputs.pull-request-number
        run: |
          echo "## Version Bump PR Created" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.version-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- PR: #${{ steps.create-pr.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type: ${{ steps.bump-type.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY

  publish:
    needs: version-bump
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Get version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if version exists
        id: version-check
        run: |
          NPM_VERSION=$(npm view linear-pr version || echo "not-found")
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
          echo "NPM registry version: $NPM_VERSION"
          if [ "$NPM_VERSION" = "$(node -p "require('./package.json').version")" ]; then
            echo "Version already exists in NPM registry. Incrementing patch version..."
            npm version patch -m "chore(release): auto bump patch version to %s due to npm conflict"
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "Updated to version: $NEW_VERSION"
          fi

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add publish info to job summary
        run: |
          echo "## Package Published" >> $GITHUB_STEP_SUMMARY
          echo "- Version: v${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Published to npm" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub release created" >> $GITHUB_STEP_SUMMARY